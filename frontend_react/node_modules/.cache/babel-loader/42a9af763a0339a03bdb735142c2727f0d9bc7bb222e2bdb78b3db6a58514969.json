{"ast":null,"code":"var _jsxFileName = \"E:\\\\RESUME_PROJECTS\\\\multilingual_translator_app\\\\frontend_react\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { franc } from \"franc-min\";\nimport { iso6393 } from \"iso-639-3\";\nimport \"./App.css\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport TextField from \"@mui/material/TextField\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst languages = [{\n  code: \"ar\",\n  name: \"العربية (Arabic)\"\n}, {\n  code: \"zh\",\n  name: \"中文 (Chinese)\"\n}, {\n  code: \"cs\",\n  name: \"Čeština (Czech)\"\n}, {\n  code: \"nl\",\n  name: \"Nederlands (Dutch)\"\n}, {\n  code: \"en\",\n  name: \"English (English)\"\n}, {\n  code: \"fi\",\n  name: \"Suomi (Finnish)\"\n}, {\n  code: \"fr\",\n  name: \"Français (French)\"\n}, {\n  code: \"de\",\n  name: \"Deutsch (German)\"\n}, {\n  code: \"he\",\n  name: \"עברית (Hebrew)\"\n}, {\n  code: \"hi\",\n  name: \"हिन्दी (Hindi)\"\n}, {\n  code: \"it\",\n  name: \"Italiano (Italian)\"\n}, {\n  code: \"ja\",\n  name: \"日本語 (Japanese)\"\n}, {\n  code: \"ko\",\n  name: \"한국어 (Korean)\"\n}, {\n  code: \"fa\",\n  name: \"فارسی (Persian)\"\n}, {\n  code: \"pl\",\n  name: \"Polski (Polish)\"\n}, {\n  code: \"pt\",\n  name: \"Português (Portuguese)\"\n}, {\n  code: \"ro\",\n  name: \"Română (Romanian)\"\n}, {\n  code: \"ru\",\n  name: \"Русский (Russian)\"\n}, {\n  code: \"sv\",\n  name: \"Svenska (Swedish)\"\n}, {\n  code: \"ta\",\n  name: \"தமிழ் (Tamil)\"\n}, {\n  code: \"tr\",\n  name: \"Türkçe (Turkish)\"\n}, {\n  code: \"uk\",\n  name: \"Українська (Ukrainian)\"\n}, {\n  code: \"vi\",\n  name: \"Tiếng Việt (Vietnamese)\"\n}, {\n  code: \"es\",\n  name: \"Español (Spanish)\"\n}];\nconst languageIcons = {\n  en: \"🇬🇧\",\n  hi: \"🇮🇳\",\n  fr: \"🇫🇷\",\n  es: \"🇪🇸\",\n  de: \"🇩🇪\",\n  ta: \"🇮🇳\",\n  zh: \"🇨🇳\",\n  ar: \"🇸🇦\",\n  ru: \"🇷🇺\",\n  ja: \"🇯🇵\",\n  it: \"🇮🇹\",\n  pt: \"🇵🇹\",\n  pl: \"🇵🇱\",\n  tr: \"🇹🇷\",\n  nl: \"🇳🇱\",\n  sv: \"🇸🇪\",\n  ko: \"🇰🇷\",\n  fa: \"🇮🇷\",\n  fi: \"🇫🇮\",\n  he: \"🇮🇱\",\n  uk: \"🇺🇦\",\n  vi: \"🇻🇳\",\n  cs: \"🇨🇿\",\n  ro: \"🇷🇴\"\n};\nfunction App() {\n  _s();\n  var _languages$find;\n  const [text, setText] = useState(\"\");\n  const [targetLangs, setTargetLangs] = useState([]);\n  const [translations, setTranslations] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [detectedLang, setDetectedLang] = useState(\"\");\n  const getLanguageNameFromFranc = francCode => {\n    const lang = iso6393.find(l => l.iso6393 === francCode);\n    const iso1 = lang === null || lang === void 0 ? void 0 : lang.iso6391;\n    const match = languages.find(l => l.code === iso1);\n    return match ? {\n      name: match.name,\n      code: match.code\n    } : {\n      name: (lang === null || lang === void 0 ? void 0 : lang.name) || \"Unknown\",\n      code: \"\"\n    };\n  };\n  const handleTextChange = e => {\n    const input = e.target.value;\n    setText(input);\n    const code = franc(input);\n    if (code !== \"und\") {\n      const langObj = getLanguageNameFromFranc(code);\n      setDetectedLang(langObj.code);\n    } else {\n      setDetectedLang(\"\");\n    }\n  };\n  const handleCheckboxChange = e => {\n    const value = e.target.value;\n    if (e.target.checked) {\n      if (targetLangs.length < 5) {\n        setTargetLangs([...targetLangs, value]);\n      } else {\n        toast.warning(\"Unable to select more than 5 languages\");\n        e.target.checked = false;\n      }\n    } else {\n      setTargetLangs(targetLangs.filter(lang => lang !== value));\n    }\n  };\n  const handleVoiceTranslate = () => {\n    if (!(\"webkitSpeechRecognition\" in window)) {\n      toast.error(\"Voice input not supported in this browser\");\n      return;\n    }\n    const recognition = new window.webkitSpeechRecognition();\n    recognition.lang = \"auto\"; // automatic language detection\n    recognition.interimResults = false;\n    recognition.maxAlternatives = 1;\n    recognition.onstart = () => {\n      toast.info(\"Listening... Speak now!\");\n    };\n    recognition.onresult = async event => {\n      const transcript = event.results[0][0].transcript;\n      setText(transcript); // show the spoken text in the input box\n\n      toast.success(\"Voice captured! Translating...\");\n      try {\n        const response = await fetch(\"http://127.0.0.1:8000/translate\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            text: transcript,\n            target_langs: selectedLanguages,\n            // whatever you selected in UI\n            source_lang: null\n          })\n        });\n        const data = await response.json();\n        setTranslations(data.translations);\n        setDetectedLang(data.detected_lang);\n      } catch (error) {\n        toast.error(\"Translation failed\");\n      }\n    };\n    recognition.onerror = event => {\n      toast.error(\"Voice input error: \" + event.error);\n    };\n    recognition.start();\n  };\n  const handleTranslate = async () => {\n    if (!text || targetLangs.length === 0) return;\n    setLoading(true);\n    try {\n      const response = await axios.post(\"http://localhost:8000/translate\", {\n        text,\n        target_langs: targetLangs\n      });\n      setTranslations(response.data.translations || {});\n      setDetectedLang(response.data.detected_lang || \"\");\n    } catch (error) {\n      toast.error(\"Translation failed. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleCopy = text => {\n    navigator.clipboard.writeText(text);\n    toast.success(\"Copied to clipboard!\");\n  };\n  const handleSpeak = (text, langCode) => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.lang = langCode;\n    window.speechSynthesis.speak(utterance);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Multi-Language Translator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Enter text to translate\",\n      multiline: true,\n      minRows: 4,\n      maxRows: 10,\n      fullWidth: true,\n      value: text,\n      onChange: handleTextChange,\n      variant: \"outlined\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), detectedLang && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"detected\",\n      children: [\"Detected Language: \", ((_languages$find = languages.find(l => l.code === detectedLang)) === null || _languages$find === void 0 ? void 0 : _languages$find.name) || \"Unknown\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"checkbox-list\",\n      children: languages.map(lang => /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          value: lang.code,\n          onChange: handleCheckboxChange,\n          checked: targetLangs.includes(lang.code)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this), languageIcons[lang.code], \" \", lang.name]\n      }, lang.code, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleTranslate,\n      disabled: loading,\n      children: loading ? \"Translating...\" : \"Translate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results\",\n      children: Object.entries(translations).map(([lang, result]) => {\n        var _languages$find2;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [languageIcons[lang], \" \", (_languages$find2 = languages.find(l => l.code === lang)) === null || _languages$find2 === void 0 ? void 0 : _languages$find2.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: result\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleCopy(result),\n              children: \"Copy To Clipboard\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleSpeak(result, lang),\n              children: \"Read\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this)]\n        }, lang, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n      position: \"bottom-right\",\n      autoClose: 3000\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xpHJRD3Iv6YMUfLAinZuPjES3yM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","franc","iso6393","ToastContainer","toast","TextField","jsxDEV","_jsxDEV","languages","code","name","languageIcons","en","hi","fr","es","de","ta","zh","ar","ru","ja","it","pt","pl","tr","nl","sv","ko","fa","fi","he","uk","vi","cs","ro","App","_s","_languages$find","text","setText","targetLangs","setTargetLangs","translations","setTranslations","loading","setLoading","detectedLang","setDetectedLang","getLanguageNameFromFranc","francCode","lang","find","l","iso1","iso6391","match","handleTextChange","e","input","target","value","langObj","handleCheckboxChange","checked","length","warning","filter","handleVoiceTranslate","window","error","recognition","webkitSpeechRecognition","interimResults","maxAlternatives","onstart","info","onresult","event","transcript","results","success","response","fetch","method","headers","body","JSON","stringify","target_langs","selectedLanguages","source_lang","data","json","detected_lang","onerror","start","handleTranslate","post","handleCopy","navigator","clipboard","writeText","handleSpeak","langCode","utterance","SpeechSynthesisUtterance","speechSynthesis","speak","className","children","fileName","_jsxFileName","lineNumber","columnNumber","label","multiline","minRows","maxRows","fullWidth","onChange","variant","map","type","includes","onClick","disabled","Object","entries","result","_languages$find2","position","autoClose","_c","$RefreshReg$"],"sources":["E:/RESUME_PROJECTS/multilingual_translator_app/frontend_react/src/App.js"],"sourcesContent":["  import React, { useState } from \"react\";\r\n  import axios from \"axios\";\r\n  import { franc } from \"franc-min\";\r\n  import {iso6393} from \"iso-639-3\";\r\n  import \"./App.css\";\r\n  import { ToastContainer, toast } from \"react-toastify\";\r\n  import \"react-toastify/dist/ReactToastify.css\";\r\n  import TextField from \"@mui/material/TextField\";\r\n\r\n  const languages = [\r\n    { code: \"ar\", name: \"العربية (Arabic)\" },\r\n    { code: \"zh\", name: \"中文 (Chinese)\" },\r\n    { code: \"cs\", name: \"Čeština (Czech)\" },\r\n    { code: \"nl\", name: \"Nederlands (Dutch)\" },\r\n    { code: \"en\", name: \"English (English)\" },\r\n    { code: \"fi\", name: \"Suomi (Finnish)\" },\r\n    { code: \"fr\", name: \"Français (French)\" },\r\n    { code: \"de\", name: \"Deutsch (German)\" },\r\n    { code: \"he\", name: \"עברית (Hebrew)\" },\r\n    { code: \"hi\", name: \"हिन्दी (Hindi)\" },\r\n    { code: \"it\", name: \"Italiano (Italian)\" },\r\n    { code: \"ja\", name: \"日本語 (Japanese)\" },\r\n    { code: \"ko\", name: \"한국어 (Korean)\" },\r\n    { code: \"fa\", name: \"فارسی (Persian)\" },\r\n    { code: \"pl\", name: \"Polski (Polish)\" },\r\n    { code: \"pt\", name: \"Português (Portuguese)\" },\r\n    { code: \"ro\", name: \"Română (Romanian)\" },\r\n    { code: \"ru\", name: \"Русский (Russian)\" },\r\n    { code: \"sv\", name: \"Svenska (Swedish)\" },\r\n    { code: \"ta\", name: \"தமிழ் (Tamil)\" },\r\n    { code: \"tr\", name: \"Türkçe (Turkish)\" },\r\n    { code: \"uk\", name: \"Українська (Ukrainian)\" },\r\n    { code: \"vi\", name: \"Tiếng Việt (Vietnamese)\" },\r\n    { code: \"es\", name: \"Español (Spanish)\" }\r\n  ];\r\n\r\n\r\n  const languageIcons = {\r\n    en: \"🇬🇧\", hi: \"🇮🇳\", fr: \"🇫🇷\", es: \"🇪🇸\", de: \"🇩🇪\", ta: \"🇮🇳\", zh: \"🇨🇳\", ar: \"🇸🇦\",\r\n    ru: \"🇷🇺\", ja: \"🇯🇵\", it: \"🇮🇹\", pt: \"🇵🇹\", pl: \"🇵🇱\", tr: \"🇹🇷\", nl: \"🇳🇱\", sv: \"🇸🇪\",\r\n    ko: \"🇰🇷\", fa: \"🇮🇷\", fi: \"🇫🇮\", he: \"🇮🇱\", uk: \"🇺🇦\", vi: \"🇻🇳\", cs: \"🇨🇿\", ro: \"🇷🇴\"\r\n  };\r\n\r\n  function App() {\r\n    const [text, setText] = useState(\"\");\r\n    const [targetLangs, setTargetLangs] = useState([]);\r\n    const [translations, setTranslations] = useState({});\r\n    const [loading, setLoading] = useState(false);\r\n    const [detectedLang, setDetectedLang] = useState(\"\");\r\n\r\n    const getLanguageNameFromFranc = (francCode) => {\r\n      const lang = iso6393.find((l) => l.iso6393 === francCode);\r\n      const iso1 = lang?.iso6391;\r\n      const match = languages.find((l) => l.code === iso1);\r\n      return match ? { name: match.name, code: match.code } : { name: lang?.name || \"Unknown\", code: \"\" };\r\n    };\r\n\r\n    const handleTextChange = (e) => {\r\n      const input = e.target.value;\r\n      setText(input);\r\n\r\n      const code = franc(input);\r\n      if (code !== \"und\") {\r\n        const langObj = getLanguageNameFromFranc(code);\r\n        setDetectedLang(langObj.code);\r\n      } else {\r\n        setDetectedLang(\"\");\r\n      }\r\n    };\r\n\r\n    const handleCheckboxChange = (e) => {\r\n      const value = e.target.value;\r\n      if (e.target.checked) {\r\n        if (targetLangs.length < 5) {\r\n          setTargetLangs([...targetLangs, value]);\r\n        } else {\r\n          toast.warning(\"Unable to select more than 5 languages\");\r\n          e.target.checked = false;\r\n        }\r\n      } else {\r\n        setTargetLangs(targetLangs.filter((lang) => lang !== value));\r\n      }\r\n    };\r\n\r\n    const handleVoiceTranslate = () => {\r\n  if (!(\"webkitSpeechRecognition\" in window)) {\r\n    toast.error(\"Voice input not supported in this browser\");\r\n    return;\r\n  }\r\n\r\n  const recognition = new window.webkitSpeechRecognition();\r\n  recognition.lang = \"auto\"; // automatic language detection\r\n  recognition.interimResults = false;\r\n  recognition.maxAlternatives = 1;\r\n\r\n  recognition.onstart = () => {\r\n    toast.info(\"Listening... Speak now!\");\r\n  };\r\n\r\n  recognition.onresult = async (event) => {\r\n    const transcript = event.results[0][0].transcript;\r\n    setText(transcript); // show the spoken text in the input box\r\n\r\n    toast.success(\"Voice captured! Translating...\");\r\n\r\n    try {\r\n      const response = await fetch(\"http://127.0.0.1:8000/translate\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          text: transcript,\r\n          target_langs: selectedLanguages, // whatever you selected in UI\r\n          source_lang: null\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      setTranslations(data.translations);\r\n      setDetectedLang(data.detected_lang);\r\n    } catch (error) {\r\n      toast.error(\"Translation failed\");\r\n    }\r\n  };\r\n\r\n  recognition.onerror = (event) => {\r\n    toast.error(\"Voice input error: \" + event.error);\r\n  };\r\n\r\n  recognition.start();\r\n};\r\n\r\n    const handleTranslate = async () => {\r\n    if (!text || targetLangs.length === 0) return;\r\n    setLoading(true);\r\n    try {\r\n      const response = await axios.post(\"http://localhost:8000/translate\", {\r\n        text,\r\n        target_langs: targetLangs\r\n      });\r\n      setTranslations(response.data.translations || {});\r\n      setDetectedLang(response.data.detected_lang || \"\");\r\n    } catch (error) {\r\n      toast.error(\"Translation failed. Please try again.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n\r\n    const handleCopy = (text) => {\r\n      navigator.clipboard.writeText(text);\r\n      toast.success(\"Copied to clipboard!\");\r\n\r\n    };\r\n\r\n    const handleSpeak = (text, langCode) => {\r\n      const utterance = new SpeechSynthesisUtterance(text);\r\n      utterance.lang = langCode;\r\n      window.speechSynthesis.speak(utterance);\r\n    };\r\n\r\n    return (\r\n    <div className=\"container\">\r\n      <h1>Multi-Language Translator</h1>\r\n      <TextField\r\n    label=\"Enter text to translate\"\r\n    multiline\r\n    minRows={4}\r\n    maxRows={10}\r\n    fullWidth\r\n    value={text}\r\n    onChange={handleTextChange}\r\n    variant=\"outlined\"\r\n  />\r\n      {detectedLang && (\r\n        <div className=\"detected\">\r\n          Detected Language: {languages.find(l => l.code === detectedLang)?.name || \"Unknown\"}\r\n        </div>\r\n      )}\r\n      <div className=\"checkbox-list\">\r\n        {languages.map((lang) => (\r\n          <label key={lang.code}>\r\n            <input\r\n              type=\"checkbox\"\r\n              value={lang.code}\r\n              onChange={handleCheckboxChange}\r\n              checked={targetLangs.includes(lang.code)}\r\n            />\r\n            {languageIcons[lang.code]} {lang.name}\r\n          </label>\r\n        ))}\r\n      </div>\r\n\r\n      <button onClick={handleTranslate} disabled={loading}>\r\n        {loading ? \"Translating...\" : \"Translate\"}\r\n      </button>\r\n\r\n      <div className=\"results\">\r\n        {Object.entries(translations).map(([lang, result]) => (\r\n          <div className=\"card\" key={lang}>\r\n            <h3>{languageIcons[lang]} {languages.find(l => l.code === lang)?.name}</h3>\r\n            <p>{result}</p>\r\n            <div className=\"card-buttons\">\r\n              <button onClick={() => handleCopy(result)}>Copy To Clipboard</button>\r\n              <button onClick={() => handleSpeak(result, lang)}>Read</button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <ToastContainer position=\"bottom-right\" autoClose={3000} />\r\n    </div>\r\n  );\r\n  }\r\n\r\n  export default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}