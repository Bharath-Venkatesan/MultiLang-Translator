{"ast":null,"code":"let imports = {};\nimports['__wbindgen_placeholder__'] = module.exports;\nlet wasm;\nconst {\n  TextEncoder,\n  TextDecoder\n} = require(`util`);\nconst heap = new Array(128).fill(undefined);\nheap.push(undefined, null, true, false);\nfunction getObject(idx) {\n  return heap[idx];\n}\nlet WASM_VECTOR_LEN = 0;\nlet cachedUint8Memory0 = null;\nfunction getUint8Memory0() {\n  if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n    cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n  }\n  return cachedUint8Memory0;\n}\nlet cachedTextEncoder = new TextEncoder('utf-8');\nconst encodeString = typeof cachedTextEncoder.encodeInto === 'function' ? function (arg, view) {\n  return cachedTextEncoder.encodeInto(arg, view);\n} : function (arg, view) {\n  const buf = cachedTextEncoder.encode(arg);\n  view.set(buf);\n  return {\n    read: arg.length,\n    written: buf.length\n  };\n};\nfunction passStringToWasm0(arg, malloc, realloc) {\n  if (realloc === undefined) {\n    const buf = cachedTextEncoder.encode(arg);\n    const ptr = malloc(buf.length, 1) >>> 0;\n    getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n    WASM_VECTOR_LEN = buf.length;\n    return ptr;\n  }\n  let len = arg.length;\n  let ptr = malloc(len, 1) >>> 0;\n  const mem = getUint8Memory0();\n  let offset = 0;\n  for (; offset < len; offset++) {\n    const code = arg.charCodeAt(offset);\n    if (code > 0x7F) break;\n    mem[ptr + offset] = code;\n  }\n  if (offset !== len) {\n    if (offset !== 0) {\n      arg = arg.slice(offset);\n    }\n    ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n    const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n    const ret = encodeString(arg, view);\n    offset += ret.written;\n  }\n  WASM_VECTOR_LEN = offset;\n  return ptr;\n}\nfunction isLikeNone(x) {\n  return x === undefined || x === null;\n}\nlet cachedInt32Memory0 = null;\nfunction getInt32Memory0() {\n  if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n    cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n  }\n  return cachedInt32Memory0;\n}\nlet heap_next = heap.length;\nfunction dropObject(idx) {\n  if (idx < 132) return;\n  heap[idx] = heap_next;\n  heap_next = idx;\n}\nfunction takeObject(idx) {\n  const ret = getObject(idx);\n  dropObject(idx);\n  return ret;\n}\nlet cachedTextDecoder = new TextDecoder('utf-8', {\n  ignoreBOM: true,\n  fatal: true\n});\ncachedTextDecoder.decode();\nfunction getStringFromWasm0(ptr, len) {\n  ptr = ptr >>> 0;\n  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\nfunction addHeapObject(obj) {\n  if (heap_next === heap.length) heap.push(heap.length + 1);\n  const idx = heap_next;\n  heap_next = heap[idx];\n  heap[idx] = obj;\n  return idx;\n}\nfunction debugString(val) {\n  // primitive types\n  const type = typeof val;\n  if (type == 'number' || type == 'boolean' || val == null) {\n    return `${val}`;\n  }\n  if (type == 'string') {\n    return `\"${val}\"`;\n  }\n  if (type == 'symbol') {\n    const description = val.description;\n    if (description == null) {\n      return 'Symbol';\n    } else {\n      return `Symbol(${description})`;\n    }\n  }\n  if (type == 'function') {\n    const name = val.name;\n    if (typeof name == 'string' && name.length > 0) {\n      return `Function(${name})`;\n    } else {\n      return 'Function';\n    }\n  }\n  // objects\n  if (Array.isArray(val)) {\n    const length = val.length;\n    let debug = '[';\n    if (length > 0) {\n      debug += debugString(val[0]);\n    }\n    for (let i = 1; i < length; i++) {\n      debug += ', ' + debugString(val[i]);\n    }\n    debug += ']';\n    return debug;\n  }\n  // Test for built-in\n  const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n  let className;\n  if (builtInMatches.length > 1) {\n    className = builtInMatches[1];\n  } else {\n    // Failed to match the standard '[object ClassName]'\n    return toString.call(val);\n  }\n  if (className == 'Object') {\n    // we're a user defined class or Object\n    // JSON.stringify avoids problems with cycles, and is generally much\n    // easier than looping through ownProperties of `val`.\n    try {\n      return 'Object(' + JSON.stringify(val) + ')';\n    } catch (_) {\n      return 'Object';\n    }\n  }\n  // errors\n  if (val instanceof Error) {\n    return `${val.name}: ${val.message}\\n${val.stack}`;\n  }\n  // TODO we could test for more things here, like `Set`s and `Map`s.\n  return className;\n}\nlet cachedUint32Memory0 = null;\nfunction getUint32Memory0() {\n  if (cachedUint32Memory0 === null || cachedUint32Memory0.byteLength === 0) {\n    cachedUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n  }\n  return cachedUint32Memory0;\n}\nfunction passArrayJsValueToWasm0(array, malloc) {\n  const ptr = malloc(array.length * 4, 4) >>> 0;\n  const mem = getUint32Memory0();\n  for (let i = 0; i < array.length; i++) {\n    mem[ptr / 4 + i] = addHeapObject(array[i]);\n  }\n  WASM_VECTOR_LEN = array.length;\n  return ptr;\n}\nlet cachedFloat64Memory0 = null;\nfunction getFloat64Memory0() {\n  if (cachedFloat64Memory0 === null || cachedFloat64Memory0.byteLength === 0) {\n    cachedFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n  }\n  return cachedFloat64Memory0;\n}\n/**\n*/\nclass LanguageDetector {\n  static __wrap(ptr) {\n    ptr = ptr >>> 0;\n    const obj = Object.create(LanguageDetector.prototype);\n    obj.__wbg_ptr = ptr;\n    return obj;\n  }\n  __destroy_into_raw() {\n    const ptr = this.__wbg_ptr;\n    this.__wbg_ptr = 0;\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_languagedetector_free(ptr);\n  }\n  /**\n  * Detects the language of given input text.\n  * If the language cannot be reliably detected, `undefined` is returned.\n  * @param {string} text\n  * @returns {string | undefined}\n  */\n  detectLanguageOf(text) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.languagedetector_detectLanguageOf(retptr, this.__wbg_ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      let v2;\n      if (r0 !== 0) {\n        v2 = getStringFromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n      }\n      return v2;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Attempts to detect multiple languages in mixed-language text.\n  *\n  * This feature is experimental and under continuous development.\n  *\n  * An array of [DetectionResult] is returned containing an entry for each contiguous\n  * single-language text section as identified by the library. Each entry consists\n  * of the identified language, a start index and an end index. The indices denote\n  * the substring that has been identified as a contiguous single-language text section.\n  * @param {string} text\n  * @returns {any}\n  */\n  detectMultipleLanguagesOf(text) {\n    const ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.languagedetector_detectMultipleLanguagesOf(this.__wbg_ptr, ptr0, len0);\n    return takeObject(ret);\n  }\n  /**\n  * Computes confidence values for each language supported by this detector for the given\n  * input text. These values denote how likely it is that the given text has been written\n  * in any of the languages supported by this detector.\n  *\n  * An array of two-element objects is returned containing those languages which the\n  * calling instance of `LanguageDetector` has been built from, together with their\n  * confidence values. The entries are sorted by their confidence value in descending order.\n  * Each value is a probability between 0.0 and 1.0. The probabilities of all languages will\n  * sum to 1.0. If the language is unambiguously identified by the rule engine, the value\n  * 1.0 will always be returned for this language. The other languages will receive a value\n  * of 0.0.\n  * @param {string} text\n  * @returns {any}\n  */\n  computeLanguageConfidenceValues(text) {\n    const ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.languagedetector_computeLanguageConfidenceValues(this.__wbg_ptr, ptr0, len0);\n    return takeObject(ret);\n  }\n  /**\n  * Computes the confidence value for the given language and input text. This value denotes\n  * how likely it is that the given text has been written in the given language.\n  *\n  * The value that this method computes is a number between 0.0 and 1.0. If the language is\n  * unambiguously identified by the rule engine, the value 1.0 will always be returned.\n  * If the given language is not supported by this detector instance, the value 0.0 will\n  * always be returned.\n  * @param {string} text\n  * @param {string} language\n  * @returns {number}\n  */\n  computeLanguageConfidence(text, language) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      const ptr1 = passStringToWasm0(language, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len1 = WASM_VECTOR_LEN;\n      wasm.languagedetector_computeLanguageConfidence(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n      var r0 = getFloat64Memory0()[retptr / 8 + 0];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      var r3 = getInt32Memory0()[retptr / 4 + 3];\n      if (r3) {\n        throw takeObject(r2);\n      }\n      return r0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n}\nmodule.exports.LanguageDetector = LanguageDetector;\n/**\n* This struct configures and creates an instance of [LanguageDetector].\n*/\nclass LanguageDetectorBuilder {\n  static __wrap(ptr) {\n    ptr = ptr >>> 0;\n    const obj = Object.create(LanguageDetectorBuilder.prototype);\n    obj.__wbg_ptr = ptr;\n    return obj;\n  }\n  __destroy_into_raw() {\n    const ptr = this.__wbg_ptr;\n    this.__wbg_ptr = 0;\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_languagedetectorbuilder_free(ptr);\n  }\n  /**\n  * Creates and returns an instance of `LanguageDetectorBuilder` with all built-in languages.\n  * @returns {LanguageDetectorBuilder}\n  */\n  static fromAllLanguages() {\n    const ret = wasm.languagedetectorbuilder_fromAllLanguages();\n    return LanguageDetectorBuilder.__wrap(ret);\n  }\n  /**\n  * Creates and returns an instance of `LanguageDetectorBuilder`\n  * with all built-in spoken languages.\n  * @returns {LanguageDetectorBuilder}\n  */\n  static fromAllSpokenLanguages() {\n    const ret = wasm.languagedetectorbuilder_fromAllSpokenLanguages();\n    return LanguageDetectorBuilder.__wrap(ret);\n  }\n  /**\n  * Creates and returns an instance of `LanguageDetectorBuilder`\n  * with all built-in languages supporting the Arabic script.\n  * @returns {LanguageDetectorBuilder}\n  */\n  static fromAllLanguagesWithArabicScript() {\n    const ret = wasm.languagedetectorbuilder_fromAllLanguagesWithArabicScript();\n    return LanguageDetectorBuilder.__wrap(ret);\n  }\n  /**\n  * Creates and returns an instance of `LanguageDetectorBuilder`\n  * with all built-in languages supporting the Cyrillic script.\n  * @returns {LanguageDetectorBuilder}\n  */\n  static fromAllLanguagesWithCyrillicScript() {\n    const ret = wasm.languagedetectorbuilder_fromAllLanguagesWithCyrillicScript();\n    return LanguageDetectorBuilder.__wrap(ret);\n  }\n  /**\n  * Creates and returns an instance of `LanguageDetectorBuilder`\n  * with all built-in languages supporting the Devanagari script.\n  * @returns {LanguageDetectorBuilder}\n  */\n  static fromAllLanguagesWithDevanagariScript() {\n    const ret = wasm.languagedetectorbuilder_fromAllLanguagesWithDevanagariScript();\n    return LanguageDetectorBuilder.__wrap(ret);\n  }\n  /**\n  * Creates and returns an instance of `LanguageDetectorBuilder`\n  * with all built-in languages supporting the Latin script.\n  * @returns {LanguageDetectorBuilder}\n  */\n  static fromAllLanguagesWithLatinScript() {\n    const ret = wasm.languagedetectorbuilder_fromAllLanguagesWithLatinScript();\n    return LanguageDetectorBuilder.__wrap(ret);\n  }\n  /**\n  * Creates and returns an instance of `LanguageDetectorBuilder`\n  * with all built-in languages except those specified in `languages`.\n  *\n  * ⚠ Throws an error if less than two `languages` are used to build\n  * the `LanguageDetector`.\n  * @param {any[]} languages\n  * @returns {LanguageDetectorBuilder}\n  */\n  static fromAllLanguagesWithout(languages) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passArrayJsValueToWasm0(languages, wasm.__wbindgen_malloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.languagedetectorbuilder_fromAllLanguagesWithout(retptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return LanguageDetectorBuilder.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Creates and returns an instance of `LanguageDetectorBuilder`\n  * with the specified `languages`.\n  *\n  * ⚠ Throws an error if less than two `languages` are specified.\n  * @param {any[]} languages\n  * @returns {LanguageDetectorBuilder}\n  */\n  static fromLanguages(languages) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passArrayJsValueToWasm0(languages, wasm.__wbindgen_malloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.languagedetectorbuilder_fromLanguages(retptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return LanguageDetectorBuilder.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Creates and returns an instance of `LanguageDetectorBuilder`\n  * with the languages specified by the respective ISO 639-1 codes.\n  *\n  * ⚠ Throws an error if less than two `iso_codes` are specified.\n  * @param {any[]} isoCodes\n  * @returns {LanguageDetectorBuilder}\n  */\n  static fromISOCodes6391(isoCodes) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passArrayJsValueToWasm0(isoCodes, wasm.__wbindgen_malloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.languagedetectorbuilder_fromISOCodes6391(retptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return LanguageDetectorBuilder.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Creates and returns an instance of `LanguageDetectorBuilder`\n  * with the languages specified by the respective ISO 639-3 codes.\n  *\n  * ⚠ Throws an error if less than two `iso_codes` are specified.\n  * @param {any[]} isoCodes\n  * @returns {LanguageDetectorBuilder}\n  */\n  static fromISOCodes6393(isoCodes) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passArrayJsValueToWasm0(isoCodes, wasm.__wbindgen_malloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.languagedetectorbuilder_fromISOCodes6393(retptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return LanguageDetectorBuilder.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Sets the desired value for the minimum relative distance measure.\n  *\n  * By default, *Lingua* returns the most likely language for a given\n  * input text. However, there are certain words that are spelled the\n  * same in more than one language. The word *prologue*, for instance,\n  * is both a valid English and French word. Lingua would output either\n  * English or French which might be wrong in the given context.\n  * For cases like that, it is possible to specify a minimum relative\n  * distance that the logarithmized and summed up probabilities for\n  * each possible language have to satisfy.\n  *\n  * Be aware that the distance between the language probabilities is\n  * dependent on the length of the input text. The longer the input\n  * text, the larger the distance between the languages. So if you\n  * want to classify very short text phrases, do not set the minimum\n  * relative distance too high. Otherwise you will get most results\n  * returned as `undefined` which is the return value for cases\n  * where language detection is not reliably possible.\n  *\n  * ⚠ Throws an error if `distance` is smaller than 0.0 or greater than 0.99.\n  * @param {number} distance\n  * @returns {LanguageDetectorBuilder}\n  */\n  withMinimumRelativeDistance(distance) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.languagedetectorbuilder_withMinimumRelativeDistance(retptr, this.__wbg_ptr, distance);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return LanguageDetectorBuilder.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Configures `LanguageDetectorBuilder` to preload all language models when creating\n  * the instance of [LanguageDetector].\n  *\n  * By default, *Lingua* uses lazy-loading to load only those language models\n  * on demand which are considered relevant by the rule-based filter engine.\n  * For web services, for instance, it is rather beneficial to preload all language\n  * models into memory to avoid unexpected latency while waiting for the\n  * service response. This method allows to switch between these two loading modes.\n  * @returns {LanguageDetectorBuilder}\n  */\n  withPreloadedLanguageModels() {\n    const ret = wasm.languagedetectorbuilder_withPreloadedLanguageModels(this.__wbg_ptr);\n    return LanguageDetectorBuilder.__wrap(ret);\n  }\n  /**\n  * Disables the high accuracy mode in order to save memory and increase performance.\n  *\n  * By default, *Lingua's* high detection accuracy comes at the cost of loading large\n  * language models into memory which might not be feasible for systems running low on\n  * resources.\n  *\n  * This method disables the high accuracy mode so that only a small subset of language\n  * models is loaded into memory. The downside of this approach is that detection accuracy\n  * for short texts consisting of less than 120 characters will drop significantly. However,\n  * detection accuracy for texts which are longer than 120 characters will remain mostly\n  * unaffected.\n  * @returns {LanguageDetectorBuilder}\n  */\n  withLowAccuracyMode() {\n    const ret = wasm.languagedetectorbuilder_withLowAccuracyMode(this.__wbg_ptr);\n    return LanguageDetectorBuilder.__wrap(ret);\n  }\n  /**\n  * Creates and returns the configured instance of [LanguageDetector].\n  * @returns {LanguageDetector}\n  */\n  build() {\n    const ret = wasm.languagedetectorbuilder_build(this.__wbg_ptr);\n    return LanguageDetector.__wrap(ret);\n  }\n}\nmodule.exports.LanguageDetectorBuilder = LanguageDetectorBuilder;\nmodule.exports.__wbindgen_string_get = function (arg0, arg1) {\n  const obj = getObject(arg1);\n  const ret = typeof obj === 'string' ? obj : undefined;\n  var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len1 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len1;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n};\nmodule.exports.__wbindgen_object_drop_ref = function (arg0) {\n  takeObject(arg0);\n};\nmodule.exports.__wbindgen_string_new = function (arg0, arg1) {\n  const ret = getStringFromWasm0(arg0, arg1);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbindgen_object_clone_ref = function (arg0) {\n  const ret = getObject(arg0);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbindgen_error_new = function (arg0, arg1) {\n  const ret = new Error(getStringFromWasm0(arg0, arg1));\n  return addHeapObject(ret);\n};\nmodule.exports.__wbindgen_number_new = function (arg0) {\n  const ret = arg0;\n  return addHeapObject(ret);\n};\nmodule.exports.__wbindgen_bigint_from_u64 = function (arg0) {\n  const ret = BigInt.asUintN(64, arg0);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_set_841ac57cff3d672b = function (arg0, arg1, arg2) {\n  getObject(arg0)[takeObject(arg1)] = takeObject(arg2);\n};\nmodule.exports.__wbg_new_898a68150f225f2e = function () {\n  const ret = new Array();\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_new_b51585de1b234aff = function () {\n  const ret = new Object();\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_set_502d29070ea18557 = function (arg0, arg1, arg2) {\n  getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n};\nmodule.exports.__wbindgen_debug_string = function (arg0, arg1) {\n  const ret = debugString(getObject(arg1));\n  const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  const len1 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len1;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n};\nmodule.exports.__wbindgen_throw = function (arg0, arg1) {\n  throw new Error(getStringFromWasm0(arg0, arg1));\n};\nconst path = require('path').join(__dirname, 'lingua_bg.wasm');\nconst bytes = require('fs').readFileSync(path);\nconst wasmModule = new WebAssembly.Module(bytes);\nconst wasmInstance = new WebAssembly.Instance(wasmModule, imports);\nwasm = wasmInstance.exports;\nmodule.exports.__wasm = wasm;","map":{"version":3,"names":["imports","module","exports","wasm","TextEncoder","TextDecoder","require","heap","Array","fill","undefined","push","getObject","idx","WASM_VECTOR_LEN","cachedUint8Memory0","getUint8Memory0","byteLength","Uint8Array","memory","buffer","cachedTextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","length","written","passStringToWasm0","malloc","realloc","ptr","subarray","len","mem","offset","code","charCodeAt","slice","ret","isLikeNone","x","cachedInt32Memory0","getInt32Memory0","Int32Array","heap_next","dropObject","takeObject","cachedTextDecoder","ignoreBOM","fatal","decode","getStringFromWasm0","addHeapObject","obj","debugString","val","type","description","name","isArray","debug","i","builtInMatches","exec","toString","call","className","JSON","stringify","_","Error","message","stack","cachedUint32Memory0","getUint32Memory0","Uint32Array","passArrayJsValueToWasm0","array","cachedFloat64Memory0","getFloat64Memory0","Float64Array","LanguageDetector","__wrap","Object","create","prototype","__wbg_ptr","__destroy_into_raw","free","__wbg_languagedetector_free","detectLanguageOf","text","retptr","__wbindgen_add_to_stack_pointer","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","languagedetector_detectLanguageOf","r0","r1","v2","__wbindgen_free","detectMultipleLanguagesOf","languagedetector_detectMultipleLanguagesOf","computeLanguageConfidenceValues","languagedetector_computeLanguageConfidenceValues","computeLanguageConfidence","language","ptr1","len1","languagedetector_computeLanguageConfidence","r2","r3","LanguageDetectorBuilder","__wbg_languagedetectorbuilder_free","fromAllLanguages","languagedetectorbuilder_fromAllLanguages","fromAllSpokenLanguages","languagedetectorbuilder_fromAllSpokenLanguages","fromAllLanguagesWithArabicScript","languagedetectorbuilder_fromAllLanguagesWithArabicScript","fromAllLanguagesWithCyrillicScript","languagedetectorbuilder_fromAllLanguagesWithCyrillicScript","fromAllLanguagesWithDevanagariScript","languagedetectorbuilder_fromAllLanguagesWithDevanagariScript","fromAllLanguagesWithLatinScript","languagedetectorbuilder_fromAllLanguagesWithLatinScript","fromAllLanguagesWithout","languages","languagedetectorbuilder_fromAllLanguagesWithout","fromLanguages","languagedetectorbuilder_fromLanguages","fromISOCodes6391","isoCodes","languagedetectorbuilder_fromISOCodes6391","fromISOCodes6393","languagedetectorbuilder_fromISOCodes6393","withMinimumRelativeDistance","distance","languagedetectorbuilder_withMinimumRelativeDistance","withPreloadedLanguageModels","languagedetectorbuilder_withPreloadedLanguageModels","withLowAccuracyMode","languagedetectorbuilder_withLowAccuracyMode","build","languagedetectorbuilder_build","__wbindgen_string_get","arg0","arg1","__wbindgen_object_drop_ref","__wbindgen_string_new","__wbindgen_object_clone_ref","__wbindgen_error_new","__wbindgen_number_new","__wbindgen_bigint_from_u64","BigInt","asUintN","__wbg_set_841ac57cff3d672b","arg2","__wbg_new_898a68150f225f2e","__wbg_new_b51585de1b234aff","__wbg_set_502d29070ea18557","__wbindgen_debug_string","__wbindgen_throw","path","join","__dirname","bytes","readFileSync","wasmModule","WebAssembly","Module","wasmInstance","Instance","__wasm"],"sources":["E:/RESUME_PROJECTS/multilingual_translator_app/frontend_react/node_modules/@bluzzi/lingua/src/lingua.js"],"sourcesContent":["let imports = {};\nimports['__wbindgen_placeholder__'] = module.exports;\nlet wasm;\nconst { TextEncoder, TextDecoder } = require(`util`);\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nlet cachedUint32Memory0 = null;\n\nfunction getUint32Memory0() {\n    if (cachedUint32Memory0 === null || cachedUint32Memory0.byteLength === 0) {\n        cachedUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachedUint32Memory0;\n}\n\nfunction passArrayJsValueToWasm0(array, malloc) {\n    const ptr = malloc(array.length * 4, 4) >>> 0;\n    const mem = getUint32Memory0();\n    for (let i = 0; i < array.length; i++) {\n        mem[ptr / 4 + i] = addHeapObject(array[i]);\n    }\n    WASM_VECTOR_LEN = array.length;\n    return ptr;\n}\n\nlet cachedFloat64Memory0 = null;\n\nfunction getFloat64Memory0() {\n    if (cachedFloat64Memory0 === null || cachedFloat64Memory0.byteLength === 0) {\n        cachedFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachedFloat64Memory0;\n}\n/**\n*/\nclass LanguageDetector {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(LanguageDetector.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_languagedetector_free(ptr);\n    }\n    /**\n    * Detects the language of given input text.\n    * If the language cannot be reliably detected, `undefined` is returned.\n    * @param {string} text\n    * @returns {string | undefined}\n    */\n    detectLanguageOf(text) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.languagedetector_detectLanguageOf(retptr, this.__wbg_ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v2;\n            if (r0 !== 0) {\n                v2 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Attempts to detect multiple languages in mixed-language text.\n    *\n    * This feature is experimental and under continuous development.\n    *\n    * An array of [DetectionResult] is returned containing an entry for each contiguous\n    * single-language text section as identified by the library. Each entry consists\n    * of the identified language, a start index and an end index. The indices denote\n    * the substring that has been identified as a contiguous single-language text section.\n    * @param {string} text\n    * @returns {any}\n    */\n    detectMultipleLanguagesOf(text) {\n        const ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.languagedetector_detectMultipleLanguagesOf(this.__wbg_ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n    /**\n    * Computes confidence values for each language supported by this detector for the given\n    * input text. These values denote how likely it is that the given text has been written\n    * in any of the languages supported by this detector.\n    *\n    * An array of two-element objects is returned containing those languages which the\n    * calling instance of `LanguageDetector` has been built from, together with their\n    * confidence values. The entries are sorted by their confidence value in descending order.\n    * Each value is a probability between 0.0 and 1.0. The probabilities of all languages will\n    * sum to 1.0. If the language is unambiguously identified by the rule engine, the value\n    * 1.0 will always be returned for this language. The other languages will receive a value\n    * of 0.0.\n    * @param {string} text\n    * @returns {any}\n    */\n    computeLanguageConfidenceValues(text) {\n        const ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.languagedetector_computeLanguageConfidenceValues(this.__wbg_ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n    /**\n    * Computes the confidence value for the given language and input text. This value denotes\n    * how likely it is that the given text has been written in the given language.\n    *\n    * The value that this method computes is a number between 0.0 and 1.0. If the language is\n    * unambiguously identified by the rule engine, the value 1.0 will always be returned.\n    * If the given language is not supported by this detector instance, the value 0.0 will\n    * always be returned.\n    * @param {string} text\n    * @param {string} language\n    * @returns {number}\n    */\n    computeLanguageConfidence(text, language) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(language, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.languagedetector_computeLanguageConfidence(retptr, this.__wbg_ptr, ptr0, len0, ptr1, len1);\n            var r0 = getFloat64Memory0()[retptr / 8 + 0];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return r0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nmodule.exports.LanguageDetector = LanguageDetector;\n/**\n* This struct configures and creates an instance of [LanguageDetector].\n*/\nclass LanguageDetectorBuilder {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(LanguageDetectorBuilder.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_languagedetectorbuilder_free(ptr);\n    }\n    /**\n    * Creates and returns an instance of `LanguageDetectorBuilder` with all built-in languages.\n    * @returns {LanguageDetectorBuilder}\n    */\n    static fromAllLanguages() {\n        const ret = wasm.languagedetectorbuilder_fromAllLanguages();\n        return LanguageDetectorBuilder.__wrap(ret);\n    }\n    /**\n    * Creates and returns an instance of `LanguageDetectorBuilder`\n    * with all built-in spoken languages.\n    * @returns {LanguageDetectorBuilder}\n    */\n    static fromAllSpokenLanguages() {\n        const ret = wasm.languagedetectorbuilder_fromAllSpokenLanguages();\n        return LanguageDetectorBuilder.__wrap(ret);\n    }\n    /**\n    * Creates and returns an instance of `LanguageDetectorBuilder`\n    * with all built-in languages supporting the Arabic script.\n    * @returns {LanguageDetectorBuilder}\n    */\n    static fromAllLanguagesWithArabicScript() {\n        const ret = wasm.languagedetectorbuilder_fromAllLanguagesWithArabicScript();\n        return LanguageDetectorBuilder.__wrap(ret);\n    }\n    /**\n    * Creates and returns an instance of `LanguageDetectorBuilder`\n    * with all built-in languages supporting the Cyrillic script.\n    * @returns {LanguageDetectorBuilder}\n    */\n    static fromAllLanguagesWithCyrillicScript() {\n        const ret = wasm.languagedetectorbuilder_fromAllLanguagesWithCyrillicScript();\n        return LanguageDetectorBuilder.__wrap(ret);\n    }\n    /**\n    * Creates and returns an instance of `LanguageDetectorBuilder`\n    * with all built-in languages supporting the Devanagari script.\n    * @returns {LanguageDetectorBuilder}\n    */\n    static fromAllLanguagesWithDevanagariScript() {\n        const ret = wasm.languagedetectorbuilder_fromAllLanguagesWithDevanagariScript();\n        return LanguageDetectorBuilder.__wrap(ret);\n    }\n    /**\n    * Creates and returns an instance of `LanguageDetectorBuilder`\n    * with all built-in languages supporting the Latin script.\n    * @returns {LanguageDetectorBuilder}\n    */\n    static fromAllLanguagesWithLatinScript() {\n        const ret = wasm.languagedetectorbuilder_fromAllLanguagesWithLatinScript();\n        return LanguageDetectorBuilder.__wrap(ret);\n    }\n    /**\n    * Creates and returns an instance of `LanguageDetectorBuilder`\n    * with all built-in languages except those specified in `languages`.\n    *\n    * ⚠ Throws an error if less than two `languages` are used to build\n    * the `LanguageDetector`.\n    * @param {any[]} languages\n    * @returns {LanguageDetectorBuilder}\n    */\n    static fromAllLanguagesWithout(languages) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(languages, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.languagedetectorbuilder_fromAllLanguagesWithout(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return LanguageDetectorBuilder.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Creates and returns an instance of `LanguageDetectorBuilder`\n    * with the specified `languages`.\n    *\n    * ⚠ Throws an error if less than two `languages` are specified.\n    * @param {any[]} languages\n    * @returns {LanguageDetectorBuilder}\n    */\n    static fromLanguages(languages) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(languages, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.languagedetectorbuilder_fromLanguages(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return LanguageDetectorBuilder.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Creates and returns an instance of `LanguageDetectorBuilder`\n    * with the languages specified by the respective ISO 639-1 codes.\n    *\n    * ⚠ Throws an error if less than two `iso_codes` are specified.\n    * @param {any[]} isoCodes\n    * @returns {LanguageDetectorBuilder}\n    */\n    static fromISOCodes6391(isoCodes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(isoCodes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.languagedetectorbuilder_fromISOCodes6391(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return LanguageDetectorBuilder.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Creates and returns an instance of `LanguageDetectorBuilder`\n    * with the languages specified by the respective ISO 639-3 codes.\n    *\n    * ⚠ Throws an error if less than two `iso_codes` are specified.\n    * @param {any[]} isoCodes\n    * @returns {LanguageDetectorBuilder}\n    */\n    static fromISOCodes6393(isoCodes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArrayJsValueToWasm0(isoCodes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.languagedetectorbuilder_fromISOCodes6393(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return LanguageDetectorBuilder.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Sets the desired value for the minimum relative distance measure.\n    *\n    * By default, *Lingua* returns the most likely language for a given\n    * input text. However, there are certain words that are spelled the\n    * same in more than one language. The word *prologue*, for instance,\n    * is both a valid English and French word. Lingua would output either\n    * English or French which might be wrong in the given context.\n    * For cases like that, it is possible to specify a minimum relative\n    * distance that the logarithmized and summed up probabilities for\n    * each possible language have to satisfy.\n    *\n    * Be aware that the distance between the language probabilities is\n    * dependent on the length of the input text. The longer the input\n    * text, the larger the distance between the languages. So if you\n    * want to classify very short text phrases, do not set the minimum\n    * relative distance too high. Otherwise you will get most results\n    * returned as `undefined` which is the return value for cases\n    * where language detection is not reliably possible.\n    *\n    * ⚠ Throws an error if `distance` is smaller than 0.0 or greater than 0.99.\n    * @param {number} distance\n    * @returns {LanguageDetectorBuilder}\n    */\n    withMinimumRelativeDistance(distance) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.languagedetectorbuilder_withMinimumRelativeDistance(retptr, this.__wbg_ptr, distance);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return LanguageDetectorBuilder.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Configures `LanguageDetectorBuilder` to preload all language models when creating\n    * the instance of [LanguageDetector].\n    *\n    * By default, *Lingua* uses lazy-loading to load only those language models\n    * on demand which are considered relevant by the rule-based filter engine.\n    * For web services, for instance, it is rather beneficial to preload all language\n    * models into memory to avoid unexpected latency while waiting for the\n    * service response. This method allows to switch between these two loading modes.\n    * @returns {LanguageDetectorBuilder}\n    */\n    withPreloadedLanguageModels() {\n        const ret = wasm.languagedetectorbuilder_withPreloadedLanguageModels(this.__wbg_ptr);\n        return LanguageDetectorBuilder.__wrap(ret);\n    }\n    /**\n    * Disables the high accuracy mode in order to save memory and increase performance.\n    *\n    * By default, *Lingua's* high detection accuracy comes at the cost of loading large\n    * language models into memory which might not be feasible for systems running low on\n    * resources.\n    *\n    * This method disables the high accuracy mode so that only a small subset of language\n    * models is loaded into memory. The downside of this approach is that detection accuracy\n    * for short texts consisting of less than 120 characters will drop significantly. However,\n    * detection accuracy for texts which are longer than 120 characters will remain mostly\n    * unaffected.\n    * @returns {LanguageDetectorBuilder}\n    */\n    withLowAccuracyMode() {\n        const ret = wasm.languagedetectorbuilder_withLowAccuracyMode(this.__wbg_ptr);\n        return LanguageDetectorBuilder.__wrap(ret);\n    }\n    /**\n    * Creates and returns the configured instance of [LanguageDetector].\n    * @returns {LanguageDetector}\n    */\n    build() {\n        const ret = wasm.languagedetectorbuilder_build(this.__wbg_ptr);\n        return LanguageDetector.__wrap(ret);\n    }\n}\nmodule.exports.LanguageDetectorBuilder = LanguageDetectorBuilder;\n\nmodule.exports.__wbindgen_string_get = function(arg0, arg1) {\n    const obj = getObject(arg1);\n    const ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len1;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n};\n\nmodule.exports.__wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nmodule.exports.__wbindgen_string_new = function(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_object_clone_ref = function(arg0) {\n    const ret = getObject(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_error_new = function(arg0, arg1) {\n    const ret = new Error(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_number_new = function(arg0) {\n    const ret = arg0;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_bigint_from_u64 = function(arg0) {\n    const ret = BigInt.asUintN(64, arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_set_841ac57cff3d672b = function(arg0, arg1, arg2) {\n    getObject(arg0)[takeObject(arg1)] = takeObject(arg2);\n};\n\nmodule.exports.__wbg_new_898a68150f225f2e = function() {\n    const ret = new Array();\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_new_b51585de1b234aff = function() {\n    const ret = new Object();\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_set_502d29070ea18557 = function(arg0, arg1, arg2) {\n    getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n};\n\nmodule.exports.__wbindgen_debug_string = function(arg0, arg1) {\n    const ret = debugString(getObject(arg1));\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len1;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n};\n\nmodule.exports.__wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nconst path = require('path').join(__dirname, 'lingua_bg.wasm');\nconst bytes = require('fs').readFileSync(path);\n\nconst wasmModule = new WebAssembly.Module(bytes);\nconst wasmInstance = new WebAssembly.Instance(wasmModule, imports);\nwasm = wasmInstance.exports;\nmodule.exports.__wasm = wasm;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}